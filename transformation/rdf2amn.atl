module rdf2amn;
create OUT: AMN from IN: SW;

-- @path SW=/metamodel/SW.ecore
-- @path AMN=/metalmodel/AMN.ecore

--- Global Variables
helper def: gEnumDT: Set(String) =
	Set{}
;

helper def: gBuiltinDT: Set(String) = 
	Set{}
;

helper def: gAbstractConstants: Set(String) =
	Set{}
;

helper def: gAbstractVariables: Set(String) =
	Set{}
;

helper def: gNamedIndividual:  Set(String) =
	Set{}
;

helper def: gParentClass: Map(String, String) = 
	Map{}
;

helper def: gClassRestriction: Map(String, OrderedSet(String)) =
	Map{}
;


rule RDF2Refinement{
	from 
		rd: SW!RDFDocument
	using {
		sos : Set(AMN!Operation) = Set{};
		avs: String = 'ICEXT';
		iext: String = 'IEXT';
		objectProperties: Set(SW!ObjectProperty) = rd.owlObjectProperty;
		datatypeProperties: Set(SW!DatatypeProperty) = rd.owlDatatypeProperty;
		refName:String = rd.owlOntology->collect(c|c.shortName).first();
		
	}
	to 
		--- SEES
		ctxt: AMN!AbstractMachine(
			name <- 'ContextRDF'
		),
		ref: AMN!Refinement(
			name <- refName.substring(1,1).toUpper() + refName.substring(2,refName.size()),
			refines <- thisModule.initRefines(ctxt, ref.name, rd),
			sees <- ctxt,
			-- Some init operations are in initAbstractVariables()
			abstractVariables <- thisModule.initAbstractVariables(rd).abstractVariables,
			sets <- classSet,
			sets <- rd.owlDatatypeProperty->collect(o | thisModule.initPropertySet(o))->select(o|o.name.size() > 0),
			sets <- rd.owlObjectProperty->collect(o | thisModule.initPropertySet(o))->select(o|o.name.size() > 0),
			definitions <- defin,
			abstractConstants <- 'IS_IP',
			abstractConstants <- rd.owlDatatypeProperty->collect(o | thisModule.initPropertyAbstractConstans(o))->select(o|o.size() > 0),
			abstractConstants <- rd.owlObjectProperty->collect(o | thisModule.initPropertyAbstractConstans(o))->select(o|o.size() > 0),
			abstractConstants <- rd.owlNamedIndividual->collect(o | o.shortName),
			properties <- conjProperties,
			invariant <- thisModule.initAbstractVariables(rd).invariant,
			invariant <- Sequence{inVariant},
			invariant <- rd.owlObjectProperty->collect(o|thisModule.initObjectPropertyInvariant(o)),
			invariant <- rd.owlObjectProperty->select(o|not thisModule.isEnumDatatype(o.shortName))->collect(o | thisModule.initObjectPropertyDomainInvariant(o)),
			invariant <- rd.owlObjectProperty->select(o|not thisModule.isEnumDatatype(o.shortName))->collect(o | thisModule.initObjectPropertyRangeInvariant(o)),
			invariant <- SW!Restriction.allInstances()->collect(r | thisModule.initClassRestrictionInvariant(r)),
			initialization <- thisModule.initAbstractVariables(rd).initialization,
			operations <- rd.sparql->collect(s | thisModule.Sparql2Operation(s))
			
		),
		--- REFINES
		
		--- SETS
		classSet: AMN!SetDecl(
			name <- 'IC',
			element <- 'Thing',
			element <- rd.owlClass->collect(c|c.shortName)
		),
		--- DEFINITIONS
		defin: AMN!Definition(
			name <- 'STRING_TYPE',
			type <- 'seq(0..255)'
		),
		defExp: AMN!FunctionalExpression(
			sign <- 'seq',
			expression <- defVar
		),
		defVar: AMN!Variable(
			name <- '0..255'
		),
		--- PROPERTIES
		conjProperties: AMN!Conjunction(
			predicate <- ref.abstractConstants->select(n|not thisModule.isInstance(n))->collect(ac | thisModule.initPropertiesIRI(ac)),
			predicate <- ref.abstractConstants->select(n|not thisModule.isInstance(n))->collect(ac | thisModule.initPropertiesFIN(ac)),
			predicate <- thisModule.initPropertiesDOM(ref.abstractConstants->select(a|not thisModule.isInstance(a))),
			predicate <- thisModule.initPropertiesCardDOM(ref.abstractConstants->select(a|not thisModule.isInstance(a))),
			predicate <- rd.owlNamedIndividual->collect(o|thisModule.initNamedIndividualProperties(o))
		),
		--- INVARIANT
		inVariant: AMN!Conjunction(
			predicate <- Sequence{icPred, icPred2},
			predicate <- rd.owlClass->select(c | 
				c.subClassOf.size() > 0)
				->collect(c|thisModule.initClassHierarchy(c))
		),
		icPred: AMN!AtomicPredicate(
			sign <- ':',
			expression <- Sequence{leftVar, icExp}
		),
		leftVar: AMN!Variable(name <- avs),
		icExp: AMN!AtomicPredicate(
			sign <- '-->',
			expression <- Sequence{icVar, powIR}
		),
		icVar: AMN!Variable(name <- 'IC'),
		irVar: AMN!Variable(name <- 'IR'),
		powIR: AMN!FunctionalExpression(
			sign <- 'POW',
			expression <- irVar	
		),
		icPred2: AMN!AtomicPredicate(
			sign <- '=',
			expression <- Sequence{icThing, ricThing}
		),
		icThing: AMN!FunctionalExpression(
			sign <- avs,
			expression <- icThingVar	
		),
		icThingVar: AMN!Variable(name <- 'Thing'),
		ricThing: AMN!Variable(name <- 'IR')
		-- Properties INVARIANT
		
		--- Initialization
	do {
		thisModule.debug('RDF2Refinement: do!');
		thisModule.debug(thisModule.resolveTemp(rd.sparql->first(), 'vmn'));
		thisModule.debug('RDF2Refinement:' + rd.sparql->first().prefix->first().name + ' done!');
	}
}

rule initRefines(ctxt: AMN!AbstractMachine, name: String, rd: SW!RDFDocument){
	to 
		am: AMN!AbstractMachine(
			name <- name + 'AM', --ref.name + 'AM',
			sees <- ctxt,
			definitions <- refsDef,
			operations <- refsOper
		),
		refsDef: AMN!Definition(
			name <- 'STRING_TYPE',
			type <- 'seq(0..255)'
		),
		refsOper: AMN!Operation(
			name <- 'patientsWithTumorOfStageIIIa', --- TODO: How to get such name?
			outputParams <- 'res',
			substitution <- block
		),
		block: AMN!Block(
			substitution <- any
		),
		any : AMN!Any(
			any <- 'res1',
			where <- anyPred,
			thenPart <- thenEqual
		),
		anyPred: AMN!AtomicPredicate(
			sign <- ':',
			expression <- Sequence{anyExpVar, anyExp}
		),
		anyExpVar: AMN!Variable(
			name <- 'res1'
		),
		anyExp: AMN!FunctionalExpression(
			sign <- 'POW',
			expression <- anySt
		),
		anySt: AMN!StructType(
			element <- anyStT
		),
		anyStT: AMN!StructTypeElement(
			name <- 'name',
			type <- anyStTVar
		),
		anyStTVar: AMN!Variable(
			name <- 'STRING_TYPE'	
		),
		thenEqual: AMN!BecomesEqual(
			leftExpression <- thenLeftExp,
			rightExpression <- thenRightExp
		),
		thenLeftExp: AMN!Variable(
			name <- 'res'
		),
		thenRightExp: AMN!Variable(
			name <- 'res1'
		)
	do{
		thisModule.debug('ctxt name:');
		thisModule.debug(ctxt.name);
		
		-- init NamedIndividual
		for(n in rd.owlNamedIndividual){
			thisModule.gNamedIndividual <- thisModule.gNamedIndividual->including(n.shortName);
		}
		-- init class with property
		for(class in rd.owlClass) {
			for(subClass in class.subClassOf){
				if(not subClass.shortName.oclIsUndefined()){
					thisModule.gParentClass <-
						thisModule.gParentClass->including(class.shortName, subClass.shortName);
				}
				for (restr in subClass.owlRestriction) {
					if(thisModule.gClassRestriction->get(restr.onProperty.shortName).oclIsUndefined()){
						thisModule.gClassRestriction <- 
							thisModule.gClassRestriction->including(
								restr.onProperty.shortName,
								OrderedSet{restr.allValuesFrom.shortName}
							);
					}
					else{
						thisModule.gClassRestriction <- 
							thisModule.gClassRestriction->including(
								restr.onProperty.shortName,
								thisModule.gClassRestriction->get(restr.onProperty.shortName)->append(restr.allValuesFrom.shortName)
							);
					}
				}
			}
		}
		thisModule.debug('gClassRestriction: ' + thisModule.gClassRestriction);
		thisModule.debug('gParentClass: ' + thisModule.gParentClass);
		am;
	}
}

unique lazy rule initAbstractVariables{
	from rd: SW!RDFDocument
	using {
		properties: Set(SW!Property) = rd.owlDatatypeProperty.union(rd.owlObjectProperty);
		pWithRange: Set(SW!Property) = properties->select(p|not p.range.oclIsUndefined());
		pWithoutRange: Set(SW!Property) = properties->select(p|p.range.oclIsUndefined());
		pBuiltin: Set(SW!Property) = pWithRange->select(p|thisModule.isBuiltinDatatype(p.range.shortName));
		acs: Set(String) = pWithoutRange->collect(p|'dt'+p.shortName)->union(pBuiltin->collect(p|p.range.shortName));
		iext: String = 'IEXT';
		icext: String = 'ICEXT';
	}
	to
		am: AMN!AbstractMachine(
			abstractVariables <- iext,
			abstractVariables <- acs->collect(ac|iext+'_' + ac + '_Range'),
			abstractVariables <- icext,
			initialization <- properties->select(p|not thisModule.isEnumDatatype(p.shortName))->collect(p|thisModule.initACSet(p)),
			initialization <- icextInit,
			invariant <- properties->select(p|not thisModule.isEnumDatatype(p.shortName))->collect(p|thisModule.initACInvariant(p))
		),
		icextInit: AMN!AtomicPredicate(
			sign <- ':=',
			expression <- Sequence{initVar, icextSet}
		),
		initVar: AMN!Variable(
			name <- icext
		),
		icextSet: AMN!SetValue(
			value <- Set{initThing},
			value <- rd.owlClass->collect(c | thisModule.initClass(rd, c))	
		),
		initThing: AMN!AtomicPredicate(
			sign <- '|->',
			expression <- Sequence{lThing, rThing}
		),
		lThing: AMN!StringValue(
			value <- 'Thing'	
		),
		rThing:	AMN!StringValue(
			value <- 'IR'
		)
	do{
		thisModule.debug('----------initAbstractVariables-----------');
		
	}
}

rule initACSet(p: SW!Property){
	using{

		ac:String = if p.range.oclIsUndefined() then p.shortName else p.range.shortName endif;	
	}
	to
		icextInit: AMN!AtomicPredicate(
			sign <- ':=',
			expression <- Sequence{initVar, icextSet}
		),
		initVar: AMN!Variable(
		),
		icextSet: AMN!SetValue(
			value <- Set{initThing}
		),
		initThing: AMN!AtomicPredicate(
			sign <- '|->',
			expression <- Sequence{lThing, rThing}
		),
		lThing: AMN!StringValue(
			value <- p.shortName	
		),
		rThing:	AMN!StringValue(
			value <- '{}'
		)
	do{
		if (p.range.oclIsUndefined()) {
			-- enumeration datatype
			ac <- 'IEXT_dt' + ac + '_Range';
		}
		else{
			if (thisModule.isBuiltinDatatype(p.range.shortName)) {
				-- built-in datatype
				ac <- 'IEXT_' + ac + '_Range';
			}
			else {
				-- non built-in datatype
				ac <- 'IEXT';
			}
		}
		initVar.name <- ac;
		icextInit;	
	}
}

rule initACInvariant(p: SW!Property){
	using{

		ac:String = if p.range.oclIsUndefined() then p.shortName else p.range.shortName endif;	
	}
	to
		leftInv: AMN!AtomicPredicate(
			sign <- ':',
			expression <- Sequence{initVar, rightInv}
		),
		initVar: AMN!Variable(
		),
		rightInv: AMN!AtomicPredicate(
			sign <- '-->',
			expression <- Sequence{rightIP, rightPOW}
		),
		rightIP: AMN!Variable(
			--name <- 'IP'	
		),
		rightPOW: AMN!FunctionalExpression(
			sign <- 'POW',
			expression <- rightMul
		),
		rightMul: AMN!AtomicPredicate(
			sign <- '*',
			expression <- Sequence{mulConst, mulVar}
		),
		mulConst: AMN!NamedConstant(
			name <- 'IR'	
		),
		mulVar: AMN!Variable(
		)
		
	do{
		thisModule.debug('---p-------'+p.shortName+'-----------');
		if (thisModule.isEnumDatatype(p.shortName)) {
			-- enumeration datatype
			initVar.name <- 'IEXT_dt' + ac + '_Range';
			rightIP.name <- 'IP_dt' + ac + '_Range';
			mulVar.name <- 'dt' + ac;
			thisModule.debug('---p-------'+p.shortName+'----enumeration-------');
		}
		else{
			if (thisModule.isBuiltinDatatype(p.range.shortName)) {
				-- built-in datatype
				initVar.name <- 'IEXT_' + ac + '_Range';
				rightIP.name <- 'IP_' + ac + '_Range';
				mulVar.name <- 'STRING_TYPE';
			}
			else {
				-- non built-in datatype
				initVar.name <- 'IEXT';
				rightIP.name <- 'IP';
				mulVar.name <- 'IR';
			}
		}
		leftInv;	
	}
}

lazy rule initClassRestrictionInvariant{
	from r: SW!Restriction
	using {
		diseaseStage: String = r.allValuesFrom.shortName;
		disease: String = diseaseStage.regexReplaceAll('Stage', '');
		iextName: String = '';
		ipName: String = '';
	}
	to
		ap: AMN!AtomicPredicate(
			sign <- '.',
			expression <- Sequence{nXY,rightExpBrac}
		),
		nXY: AMN!UnaryOperator(
			sign <- '!',
			expression <- axy
		),
		axy: AMN!BinaryOperator(
			sign <- ',',
			expression <- Sequence{xv, yv}
		),
		xv: AMN!Variable(
			name <- 'xx'	
		),
		yv: AMN!Variable(
			name <- 'yy'	
		),
		rightExpBrac: AMN!Bracketed(
			predicate <- rightExp
		),
		rightExp: AMN!Conjunction(
			predicate <- Sequence{rxr, ryr, r3456}	
		),
		rxr: AMN!BinaryOperator(
			sign <- ':',
			expression <- Sequence{rxx, rxir}
		),
		rxx: AMN!Variable(
			name <- 'xx'
		),
		rxir: AMN!Variable(
			name <- disease
		),
		ryr: AMN!AtomicPredicate(
			sign <- ':',
			expression <- Sequence{ryy, ryir}
		),
		ryy: AMN!Variable(
			name <- 'yy'
		),
		ryir: AMN!Variable(
			name <- 'IR'	
		),
		r3456: AMN!AtomicPredicate(
			sign <- '=>',
			expression <- Sequence{r34, r56}
		),
		r34: AMN!AtomicPredicate(
			sign <- ':',
			expression <- Sequence{r3xxyy, r4iext}
		),
		r3xxyy: AMN!BinaryOperator(
			sign <- '|->',
			expression <- Sequence{r3xx, r3yy}
		),
		r3xx: AMN!Variable(
			name <- 'xx'	
		),
		r3yy: AMN!Variable(
			name <- 'yy'	
		),
		r4iext: AMN!FunctionalExpression(
			sign <- 'IEXT',
			expression <- r4dn
		),
		r4dn: AMN!Variable(
			name <- r.onProperty.shortName
		),
		r56: AMN!AtomicPredicate(
			sign <- ':',
			expression <- Sequence{r5xx, r6icext}
		),
		r5xx: AMN!Variable(
			name <- 'xx'	
		),
		r6icext: AMN!FunctionalExpression(
			sign <- 'ICEXT',
			expression <- r6dn
		),
		r6dn: AMN!Variable(
			name <- diseaseStage
		)
}

lazy rule initObjectPropertyInvariant{
	from p: SW!ObjectProperty
	to
		ap: AMN!AtomicPredicate(
			sign <- '<=',
			expression <- Sequence{leftExp, rightExp}
		),
		leftExp: AMN!FunctionalExpression(
			sign <- 'card',
			expression <- leftIcext
		),
		leftIcext: AMN!FunctionalExpression(
			sign <- 'ICEXT',
			expression <- leftVar
		),
		leftVar: AMN!Variable(
			name <- p.domain.shortName	
		),
		rightExp: AMN!Variable(
			name <- 'NN'	
		)
}

lazy rule Sparql2Operation{
	from s: SW!SparqlQuery
	using {
		res : String = 'res';
	}
	to oper: AMN!Operation(
		name <- 'patientsWithTumorOfStageIIIa', --- TODO: How to get such name?
		outputParams <- res,
		substitution <-block
	),
	block: AMN!Block(
		substitution <- equal
	),
	equal : AMN!BecomesEqual(
		leftExpression <- leftExp,
		rightExpression <- rightExp
	),
	leftExp: AMN!Variable(
		name <- res
	),
	rightExp: AMN!SetComprehension(
		variable <- 'rcrd',
		predicate <- ap
	),
	ap: AMN!Conjunction(
		predicate <- Sequence{stap, estPred}
	),
	stap: AMN!AtomicPredicate(
		sign <- ':',
		expression <- Sequence{stapvar, st}
	),
	stapvar: AMN!Variable(
		name <- 'rcrd'
	),
	st: AMN!StructType(
		element <- s.select.variables->collect(v | thisModule.selvar2struct(v))
	),
	estPred: AMN!ExistentialPredicate(
		variable <- s.select.where.patterns->select(p|p.predicate='a')->collect(s|if s.subject.size() < 2 then s.subject + s.subject else s.subject endif),
		predicate <- estConj
	),
	estConj: AMN!Conjunction(
		predicate <- s.select.where.patterns->collect(p | thisModule.selectWhere2Predicate(s, p))
	)
	do{
	
	}
}

lazy rule selvar2struct{
	from s: SW!Variable
	to
		ste: AMN!StructTypeElement(
			name <- s.name,
			type <- t
		),
		t: AMN!NamedConstant(
			name <- 'STRING_TYPE'	
		)
}

rule selectWhere2Predicate(s: SW!SparqlQuery, pattern: SW!TriplePattern){
	using {
		selNames: Set(SW!Variable) = s.select.variables->collect(v|v.name);
		estVars: Set(String) = s.select.where.patterns->select(p|p.predicate='a')->collect(s|s.subject);
		subject:String = if pattern.subject.size() < 2 then pattern.subject + pattern.subject else pattern.subject endif;
		predicate:String = pattern.predicate;
	}
	to 
		ap: AMN!AtomicPredicate(
			sign <- ':'
			-- expression <- Sequence{leftExp, rightExp}
		),
		-- pp: ICEXT(Patient)
		leftExp: AMN!Variable(
			name <- subject
		),
		rightExp: AMN!FunctionalExpression(
			sign <- 'ICEXT',
			expression <- rightVar
		),
		rightVar: AMN!Variable(
			name <- pattern.object	
		),
		-- (pp |-> rcrd'name): IEXT_String_Range(hasName)
		-- from select
		
		leftExp1Bracket: AMN!Bracketed(
			predicate <- leftExp1
		),
		leftExp1: AMN!AtomicPredicate(
			sign <- '|->',
			expression <- Sequence{leftExp1Var, leftExp1Name}
		),
		leftExp1Var: AMN!Variable(
			name <- subject	
		),
		leftExp1Name: AMN!Variable(
			name <- 'rcrd\'' + 	pattern.object
		),
		rightExp1: AMN!FunctionalExpression(
			sign <- 'IEXT_string_Range',
			expression <- rightExp1Var
		),
		rightExp1Var: AMN!Variable(
			name <- pattern.predicate	
		),
		-- (pp |-> tumor): IEXT(hasNeoplasm)
		leftExp2Bracket: AMN!Bracketed(
			predicate <- leftExp2
		),
		leftExp2: AMN!AtomicPredicate(
			sign <- '|->',
			expression <- Sequence{leftExp2Var1, leftExp2Var2}
		), 
		leftExp2Var1: AMN!Variable(
			name <- subject
		),
		leftExp2Var2: AMN!Variable(
			name <- pattern.object	
		),
		rightExp2: AMN!FunctionalExpression(
			sign <- 'IEXT',
			expression <- rightExp2Var
		),
		rightExp2Var: AMN!Variable(
			name <- pattern.predicate	
		),
		--(tumor |-> stageIIIa): IEXT_CancerStage_Range(hasStage)
		-- (tumor : ICEXT(NeoplasmStage) & NSCLC_stage_IIIa : ICEXT(NeoplasmStage))
		leftExp3Bracket: AMN!Bracketed(
			predicate <- leftExp3And
		),
		leftExp3And: AMN!AtomicPredicate(
			sign <- '&',
			expression <- Sequence{leftExp3, rightExp3}
		),
		leftExp3: AMN!AtomicPredicate(
			sign <- ':',
			expression <- Sequence{leftExp3Var1, leftExp3Var2}
		), 
		leftExp3Var1: AMN!Variable(
			name <- subject
		),
		leftExp3Var2: AMN!FunctionalExpression(
			sign <- 'ICEXT',
			expression <- leftExp3Var2Fv
		),
		leftExp3Var2Fv: AMN!StringValue(
			value <- if thisModule.gClassRestriction.get(pattern.predicate).oclIsUndefined() 
					then '' 
					else thisModule.gParentClass.get(thisModule.gClassRestriction.get(pattern.predicate).first()) endif
		),
		rightExp3: AMN!AtomicPredicate(
			sign <- ':',
			expression <- Sequence{rightExp3Var1, rightExp3Var2}
		), 
		rightExp3Var1: AMN!Variable(
			name <- pattern.object
		),
		rightExp3Var2: AMN!FunctionalExpression(
			sign <- 'ICEXT',
			expression <- rightExp3Var2Fv
		),
		rightExp3Var2Fv: AMN!StringValue(
			value <- if thisModule.gClassRestriction.get(pattern.predicate).oclIsUndefined() 
					then '' 
					else thisModule.gParentClass.get(thisModule.gClassRestriction.get(pattern.predicate).first()) endif
		)
	do{
		if (pattern.predicate = 'a') {
			ap.expression <- Sequence{leftExp, rightExp};
			ap;
		}
		else{
			if (selNames->includes(pattern.object)){
				ap.expression <- Sequence{leftExp1Bracket, rightExp1};
				ap;
			}
			else{
				if (thisModule.isEnumDatatype(pattern.predicate)) {
					leftExp3Bracket;
				}
				else{
					ap.expression <- Sequence{leftExp2Bracket, rightExp2};	
					ap;
				}
			}
		}
		
	}
}

--- Init Class
rule initClass(rd:SW!RDFDocument, c:SW!Class) {
	using {
		values: Set(String) = Set{};	
	}
	to
		ap: AMN!AtomicPredicate(
			sign <- '|->',
			expression <- Sequence{leftExp, rightExp}
		),
		leftExp: AMN!StringValue(
			value <- c.shortName	
		),
		rightExp: AMN!SetValue(
				
		)
	do{
		for(n in rd.owlNamedIndividual){
			if(c.shortName=n.type.shortName or c.shortName=thisModule.gParentClass.get(n.type.shortName)){
				values <- values->including(n.shortName); 
			}
		}
		rightExp.value <- values->collect(v|thisModule.InitClassSetVal(v));
		ap;	
	}
}

rule InitClassSetVal(n: String) {
	to 
		s: AMN!StringValue(
			value <- n	
		)
	do{
		s;	
	}
}

--- Init the SubClassOf of Classes
lazy rule initClassHierarchy{
	from c: SW!Class
	to
		ap: AMN!AtomicPredicate(
			sign <- '<:',
			expression <- Sequence{leftExp, rightExp}
		),
		leftExp: AMN!FunctionalExpression(
			sign <- 'ICEXT',
			expression <- Sequence{leftVar}
		),
		leftVar: AMN!StringValue(
			value <- c.subClassOf->collect(s|s.shortName).first()
		),
		rightExp: AMN!FunctionalExpression(
			sign <- 'ICEXT',
			expression <- Sequence{rightVar}
		),
		rightVar: AMN!StringValue(
			value <- c.shortName
		)
}

--- Init ObjectProperty and DatatypeProperty
lazy rule initPropertySet{
	from o: SW!Property
	using {
		range: SW!Class = o.range;
		domain: SW!Class = o.domain;
		setName: String = 'IP';
	}
	to
		--- SETS
		initSet: AMN!SetDecl(
			element <- Sequence{o.shortName}	
		)
	do {
		thisModule.debug('initProperty');
		--- set SETS
		if (thisModule.isEnumDatatype(o.shortName)) {
			-- enumeration datatype
			-- initSet.name <- 'IP_dt' + o.shortName + '_Range';
			-- thisModule.gEnumDT <- thisModule.gEnumDT->including(o.shortName);
			initSet.name <- '';
		}
		else{
			thisModule.debug('range:' + range.shortName);
			if (thisModule.isBuiltinDatatype(range.shortName)) {
				-- built-in datatype
				initSet.name <- 'IP_' + range.shortName + '_Range';
				thisModule.gBuiltinDT <- thisModule.gBuiltinDT->including(range.shortName);
			}
			else {
				-- non built-in datatype
				initSet.name <- 'IP';
			}
		}
		thisModule.debug('initSet.name:  ' + initSet.name);
	}
}


rule initPropertyAbstractConstans(o: SW!Property){
	using {
		range: SW!Class = o.range;
		domain: SW!Class = o.domain;
		setName: Set(String) = Set{};
	}
	do{
		if (range.oclIsUndefined()) {
			-- enumeration datatype
			setName <- setName->including('IS_IP_dt' + o.shortName + '_Range');
			setName <- setName->including('IL_dt' + o.shortName);
		}
		else{
			if (thisModule.isBuiltinDatatype(range.shortName)) {
				setName <- setName->including('IS_IP_' + range.shortName + '_Range');
			}
		}
		setName;
	}
}

rule initPropertiesIRI(abstractConstant:String) {
	using {
		acSetName: String = abstractConstant.substring(4, abstractConstant.size());
	}
	to	
		isipIRI: AMN!AtomicPredicate(
			sign <- ':',
			expression <- Sequence{isipIRIVar, iriPred}
		),
		isipIRIVar: AMN!NamedConstant(
			name <- abstractConstant
		),
		iriPred: AMN!AtomicPredicate(
			sign <- '+->',
			expression <- Sequence{iriLeftVar, iriRightVar}
		),
		iriLeftVar: AMN!NamedConstant(
			name <- 'IRI'	
		),
		iriRightVar: AMN!NamedConstant(
			name <- acSetName
		)
	do {
		isipIRI;
	}
}

rule initPropertiesFIN(abstractConstant:String) {
	to	
		isipFIN: AMN!AtomicPredicate(
			sign <- ':',
			expression <- Sequence{isipFINVar, finPred}	
		),
		isipFINVar: AMN!NamedConstant(
			name <- abstractConstant
		),
		finPred: AMN!FunctionalExpression(
			sign <- 'FIN',
			expression <- finVar
		),
		finVar: AMN!NamedConstant(
			name <- abstractConstant
		)
	do {
		isipFIN;
	}
}

rule initPropertiesDOM(abstractConstants:Sequence(String)) {
	using {
		ac: String = abstractConstants->first();
	}
	to	
		iri: AMN!AtomicPredicate(
			sign <- '=',
			expression <- Sequence{iriConst, domBin} 
		),
		iriConst: AMN!NamedConstant(
			name <- 'IRI'
		),
		domBin: AMN!BinaryOperator(
			sign <- '\\/',
			noBracket <- true,
			expression <- thisModule.initPropertiesDOMFunc('IS_IR'),
			expression <- abstractConstants->collect(c|thisModule.initPropertiesDOMFunc(c))
		)
	do {
		iri;
	}
}

rule initPropertiesDOMFunc(ac: String) {
	to
		domFunc: AMN!FunctionalExpression(
			sign <- 'dom',
			expression <- domConst
		),
		domConst: AMN!NamedConstant(
			name <- ac	
		)
	do {
		domFunc;	
	}
}

rule initPropertiesCardDOM(abstractConstants:Sequence(String)) {
	using {
		ac: String = abstractConstants->first();
	}
	to	
		iri: AMN!AtomicPredicate(
			sign <- '=',
			expression <- Sequence{iriCard, domBin} 
		),
		iriCard: AMN!FunctionalExpression(
			sign <- 'card',
			expression <- iriConst
		),
		iriConst: AMN!NamedConstant(
			name <- 'IRI'
		),
		domBin: AMN!BinaryOperator(
			sign <- '+',
			noBracket <- true,
			expression <- thisModule.initPropertiesCardDOMFunc('IS_IR'),
			expression <- abstractConstants->collect(c|thisModule.initPropertiesCardDOMFunc(c))
		)
	do {
		iri;
	}
}

rule initPropertiesCardDOMFunc(ac: String) {
	to
		cardFunc: AMN!FunctionalExpression(
			sign <- 'card',
			expression <- domFunc
		),
		domFunc: AMN!FunctionalExpression(
			sign <- 'dom',
			expression <- domConst
		),
		domConst: AMN!NamedConstant(
			name <- ac	
		)
	do {
		cardFunc;	
	}
}


lazy rule initPropertyInvariant{
	from o: SW!Property
	using {
		range: SW!Class = o.range;
		domain: SW!Class = o.domain;
		iextName: String = '';
		ipName: String = '';
	}
	to
		ap: AMN!AtomicPredicate(
			expression <- Sequence{leftExp, rightExp}
		),
		leftExp: AMN!Variable(),
		rightExp: AMN!AtomicPredicate(
			sign <- '->',
			expression <- Sequence{ipLeft, ipRight}
		),
		ipLeft: AMN!Variable(),
		ipRight: AMN!FunctionalExpression(
			sign <- 'POW',
			expression <- ipExp
		),
		ipExp: AMN!AtomicPredicate(
			sign <- '*',
			expression <- Sequence{ipConst, strConst}
		),
		ipConst: AMN!NamedConstant(
			name <- 'IP'
		),
		strConst: AMN!NamedConstant(
		)
	do {
		if (range.oclIsUndefined()) {
			-- enumeration datatype
			leftExp.name <- 'IEXT_dt' + o.shortName + '_Range';
			ipLeft.name <- 'IP_dt' + o.shortName + '_Range';
			strConst.name <- o.shortName;
			ap.sign <- ':';
		}
		else{
			thisModule.debug('range:' + range.shortName);
			if (thisModule.isBuiltinDatatype(range.shortName)) {
				-- built-in datatype
				leftExp.name <- 'IEXT_' + range.shortName + '_Range';
				ipLeft.name <- 'IP_' + range.shortName + '_Range';
				strConst.name <- 'STRING_TYPE';
				ap.sign <- ':';
			}
			else {
				-- non built-in datatype
				leftExp.name <- '_nonBuiltinIEXT';
				ipLeft.name <- '_nonBuiltinIP';
				ap.sign <- '';
				thisModule.debug('----------ERROR------');
			}
		}
	}
}

-- !(xx, yy).(xx: IR & yy: IR & (xx|->yy):IEXT(hasNeoplasm) =>
--        xx: ICEXT(Patient) ) &
lazy rule initObjectPropertyDomainInvariant{
	from o: SW!Property
	using {
		range: SW!Class = o.range;
		domain: SW!Class = o.domain;
		iextName: String = '';
		ipName: String = '';
	}
	to
		ap: AMN!AtomicPredicate(
			sign <- '.',
			expression <- Sequence{nXY,rightExpBrac}
		),
		nXY: AMN!UnaryOperator(
			sign <- '!',
			expression <- axy
		),
		axy: AMN!BinaryOperator(
			sign <- ',',
			expression <- Sequence{xv, yv}
		),
		xv: AMN!Variable(
			name <- 'xx'	
		),
		yv: AMN!Variable(
			name <- 'yy'	
		),
		rightT: AMN!Variable(
			name <- 'right'
		),
		rightExpBrac: AMN!Bracketed(
			predicate <- rightExp
		),
		rightExp: AMN!Conjunction(
			predicate <- Sequence{rxr, ryr, r3456}	
		),
		rxr: AMN!BinaryOperator(
			sign <- ':',
			expression <- Sequence{rxx, rxir}
		),
		rxx: AMN!Variable(
			name <- 'xx'
		),
		rxir: AMN!Variable(
			name <- 'IR'
		),
		ryr: AMN!AtomicPredicate(
			sign <- ':',
			expression <- Sequence{ryy, ryir}
		),
		ryy: AMN!Variable(
			name <- 'yy'
		),
		ryir: AMN!Variable(
			--name <- 'IR'	
		),
		r3456: AMN!AtomicPredicate(
			sign <- '=>',
			expression <- Sequence{r34, r56}
		),
		r34: AMN!AtomicPredicate(
			sign <- ':',
			expression <- Sequence{r3xxyy, r4iext}
		),
		r3xxyy: AMN!BinaryOperator(
			sign <- '|->',
			expression <- Sequence{r3xx, r3yy}
		),
		r3xx: AMN!Variable(
			name <- 'xx'	
		),
		r3yy: AMN!Variable(
			name <- 'yy'	
		),
		r4iext: AMN!FunctionalExpression(
			--sign <- 'IEXT',
			expression <- r4dn
		),
		r4dn: AMN!Variable(
			name <- o.shortName	
		),
		r56: AMN!AtomicPredicate(
			sign <- ':',
			expression <- Sequence{r5xx, r6icext}
		),
		r5xx: AMN!Variable(
			name <- 'xx'	
		),
		r6icext: AMN!FunctionalExpression(
			sign <- 'ICEXT',
			expression <- r6dn
		),
		r6dn: AMN!Variable(
			name <- domain.shortName	
		)
		
	do {
		if (thisModule.isEnumDatatype(o.shortName)) {
			-- enumeration datatype
			-- domain
			ryir.name <- 'dt' + o.shortName;
			r4iext.sign <- 'IEXT_dt' + o.shortName + '_Range';
		}
		else{
			if (not thisModule.isBuiltinDatatype(range.shortName)) {
				-- non built-in datatype
				-- domain & range
				ryir.name <- 'IR';
				r4iext.sign <- 'IEXT';
			}
		}
	}
}

lazy rule initObjectPropertyRangeInvariant{
	from o: SW!Property
	using {
		range: SW!Class = o.range;
		domain: SW!Class = o.domain;
		iextName: String = '';
		ipName: String = '';
	}
	to
		ap: AMN!AtomicPredicate(
			sign <- '.',
			expression <- Sequence{nXY,rightExpBrac}
		),
		nXY: AMN!UnaryOperator(
			sign <- '!',
			expression <- axy
		),
		axy: AMN!BinaryOperator(
			sign <- ',',
			expression <- Sequence{xv, yv}
		),
		xv: AMN!Variable(
			name <- 'xx'	
		),
		yv: AMN!Variable(
			name <- 'yy'	
		),
		rightT: AMN!Variable(
			name <- 'right'
		),
		rightExpBrac: AMN!Bracketed(
			predicate <- rightExp
		),
		rightExp: AMN!Conjunction(
			predicate <- Sequence{rxr, ryr, r3456}	
		),
		rxr: AMN!BinaryOperator(
			sign <- ':',
			expression <- Sequence{rxx, rxir}
		),
		rxx: AMN!Variable(
			name <- 'xx'
		),
		rxir: AMN!Variable(
			name <- 'IR'
		),
		ryr: AMN!AtomicPredicate(
			sign <- ':',
			expression <- Sequence{ryy, ryir}
		),
		ryy: AMN!Variable(
			name <- 'yy'
		),
		ryir: AMN!Variable(
			name <- 'IR'	
		),
		r3456: AMN!AtomicPredicate(
			sign <- '=>',
			expression <- Sequence{r34, r56}
		),
		r34: AMN!AtomicPredicate(
			sign <- ':',
			expression <- Sequence{r3xxyy, r4iext}
		),
		r3xxyy: AMN!BinaryOperator(
			sign <- '|->',
			expression <- Sequence{r3xx, r3yy}
		),
		r3xx: AMN!Variable(
			name <- 'xx'	
		),
		r3yy: AMN!Variable(
			name <- 'yy'	
		),
		r4iext: AMN!FunctionalExpression(
			sign <- 'IEXT',
			expression <- r4dn
		),
		r4dn: AMN!Variable(
			name <- o.shortName	
		),
		r56: AMN!AtomicPredicate(
			sign <- ':',
			expression <- Sequence{r5xx, r6icext}
		),
		r5xx: AMN!Variable(
			name <- 'xx'	
		),
		r6icext: AMN!FunctionalExpression(
			sign <- 'ICEXT',
			expression <- r6dn
		),
		r6dn: AMN!Variable(
			name <- range.shortName	
		)
		
	do {
		thisModule.debug('-------DEBUG--------');
		thisModule.debug(r3xxyy.noBracket);
		if (range.oclIsUndefined()) {
			-- enumeration datatype
			-- domain
	
		}
		else{
			if (not thisModule.isBuiltinDatatype(range.shortName)) {
				-- non built-in datatype
				-- domain & range
		
			}
		}
	}
}

lazy rule initNamedIndividualProperties{
	from o: SW!NamedIndividual
	to
		am: AMN!AtomicPredicate(
			sign <- ':',
			expression <- Sequence{lexp, rexp}
		),
		lexp: AMN!NamedConstant(
			name <- o.shortName
		),
		rexp: AMN!NamedConstant(
			name <- 'IR'	
		)
	
}

helper def: isBuiltinDatatype(t: String): Boolean =
	let builtinTypes: Set(String) = Set{'string', 'real', 'bool'} in
	if builtinTypes.includes(t) then
		true
	else
		false
	endif
; 

helper def: isEnumDatatype(t: String): Boolean =
	if thisModule.gClassRestriction->get(t).oclIsUndefined() then
		false
	else
		true
	endif
; 

helper def: isInstance(n: String): Boolean = 
	if thisModule.gNamedIndividual->includes(n) then
		true
	else
		false
	endif
; 
	
rule createPred2Variables(s: String, leftVar: String, rightVar: String) {
	to 
		ap: AMN!AtomicPredicate(
			sign <- s,
			expression <- Sequence{leftExp, rightExp}
		),
		leftExp: AMN!Variable(
			name <- leftVar
		),
		rightExp: AMN!Variable(
			name <- rightVar
		)
	do {
		thisModule.debug('createPred2Variables');
	}
}

rule createVariablePredicate(s: String, leftVar: String, pred: AMN!Predicate) {
	to ap: AMN!AtomicPredicate(
		sign <- s,
		expression <- Sequence{leftExp, pred}
	),
	leftExp: AMN!Variable(
		name <- leftVar
	)
}

rule createFunctionalPredicate(s: String, var: String) {
	to fp: AMN!FunctionalPredicate(
		sign <- s,
		expression <- e	
	),
	e: AMN!Varaible(
		name <- var	
	)
}